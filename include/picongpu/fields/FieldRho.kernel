/* Copyright 2013-2024 Luca Pennati
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"

#include "FieldTmp.hpp"
#include "FieldRho.hpp"
#include "picongpu/algorithms/Set.hpp"

#include <pmacc/lockstep.hpp>
#include <pmacc/mappings/threads/ThreadCollective.hpp>
#include <pmacc/math/operation.hpp>
#include <pmacc/memory/boxes/CachedBox.hpp>
#include <pmacc/memory/shared/Allocate.hpp>
#include <pmacc/particles/algorithm/ForEach.hpp>
#include <pmacc/particles/frame_types.hpp>
#include <pmacc/particles/memory/boxes/ParticlesBox.hpp>


namespace picongpu
{
        using namespace pmacc;

    /** Kernel used in the modifyField method
    *
    * @tparam T_ModifyingOperation a binary operation used to modify one field by another one
    * @tparam T_SuperCellSize compile-time  supercell size vector
    */
    template<typename T_ModifyingOperation, typename T_SuperCellSize>
    struct ModifyByFieldKernelRho
    {
        /** Kernel implementation
        *
        * @tparam T_Worker lockstep worker type
        * @tparam T_Mapper mapper type
        * @tparam T_Box1 1st data box type
        * @tparam T_Box2 2nd data box type
        * @param worker lockstep worker
        * @param mapper functor to map a block to a supercell
        * @param box1 data box of the first field
        * @param box2 data box of the second field
        */
        template<typename T_Worker, typename T_Mapper, typename T_Box1, typename T_Box2>
        DINLINE void operator()(T_Worker const& worker, T_Mapper const mapper, T_Box1 box1, T_Box2 const& box2) const
        {
            // Shift the fields to the supercell processed by current block.
            DataSpace<simDim> const block(mapper.getSuperCellIndex(worker.blockDomIdxND()));
            DataSpace<simDim> const blockCell = block * T_SuperCellSize::toRT();
            auto box1Block = box1.shift(blockCell);
            auto box2Block = box2.shift(blockCell);

            // Call the binary operation for a pair of field values for each cell in the supercell.
            using BlockAreaConfiguration = pmacc::SuperCellDescription<T_SuperCellSize>;
            auto applyOperationToCells = makeThreadCollective<BlockAreaConfiguration>();
            T_ModifyingOperation binaryOperation;
            applyOperationToCells(worker, binaryOperation, box1Block, box2Block);
        }
    };
} // namespace picongpu